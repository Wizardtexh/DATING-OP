import logging

from aiogram.types import ParseMode
from aiogram.utils.markdown import italic, bold

from app.keyboards import gender_keyboard, request_contact_kb, home_keyboard
from aiogram.dispatcher import FSMContext
from aiogram import types
from app.states import Profile
from app.database import db
from app import strings

log = logging.getLogger(__name__)


async def cmd_start(message: types.Message, state: FSMContext):
    user_exists = db.user_exists(message.from_user.id)
    if user_exists and db.is_user_active(message.from_user.id):
        await message.answer(bold('–ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É—é‚ùó–†–∞–¥, —á—Ç–æ –≤—ã –≤–µ—Ä–Ω—É–ª–∏—Å—å!ü§ó'),
                             parse_mode=ParseMode.MARKDOWN_V2, reply_markup=home_keyboard())
        return

    if not user_exists:
        db.add_user(message.from_user.id, message.from_user.full_name, message.from_user.username, message.from_user.language_code)
        if message.get_args():
            user_id = message.get_args()
            if db.user_exists(user_id):
                await state.update_data(inviter=user_id)
    # Set state
    await Profile.name.set()
    await message.answer(strings.welcome_msg(), parse_mode=ParseMode.MARKDOWN_V2)
    await message.answer(italic("–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ—Å—å, –∫–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?"), parse_mode=ParseMode.MARKDOWN_V2)


async def process_invalid_name(message: types.Message):
    await message.delete()
    await message.answer(bold('–ò–º—è –Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–µ–≤—ã—à–∞—Ç—å 25 —Å–∏–º–≤–æ–ª–æ–≤, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë —Ä–∞–∑–æ–∫!'), parse_mode=ParseMode.MARKDOWN_V2)


async def process_name(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['name'] = message.text

    await Profile.next()
    await message.answer(italic("–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?"), parse_mode=ParseMode.MARKDOWN_V2)


async def process_age_invalid(message: types.Message):
    return await message.reply(bold("–í–æ–∑—Ä–∞—Å—Ç –¥–æ–ª–∂–µ–Ω —Å–æ—Å—Ç–æ—è—Ç—å —Ç–æ–ª—å–∫–æ –∏–∑ —Ü–∏—Ñ—Ä. –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –≤–æ–∑—Ä–∞—Å—Ç!"), parse_mode=ParseMode.MARKDOWN_V2)


async def process_age(message: types.Message, state: FSMContext):
    await Profile.next()
    await state.update_data(age=int(message.text))

    await message.answer(italic("–ö—Ç–æ –≤—ã?"), reply_markup=gender_keyboard(strings.MALE, strings.FEMALE), parse_mode=ParseMode.MARKDOWN_V2)


async def process_gender_invalid(message: types.Message):
    return await message.delete()


async def process_gender(query: types.CallbackQuery, state: FSMContext):
    async with state.proxy() as data:
        data['gender'] = query.data
        await Profile.next()
        await query.message.edit_text(italic('–í–∞—à –≥–æ—Ä–æ–¥ (–ö–∏—Ä–∏–ª–ª–∏—Ü–µ–π)'), parse_mode=ParseMode.MARKDOWN_V2)


async def process_city_invalid(message: types.Message):
    await message.answer(bold('–ù–∞–∑–≤–∞–Ω–∏–µ –≥–æ—Ä–æ–¥–∞ –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –Ω–∞ –∫–∏—Ä–∏–ª–ª–∏—Ü–µ! –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â—ë.'), parse_mode=ParseMode.MARKDOWN_V2)


async def process_city(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['city'] = str(message.text).capitalize()
        await Profile.next()
        await message.answer(italic('–í–∞—à —Ä–æ–¥ –∑–∞–Ω—è—Ç–∏–π (—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ—Å—Ç—å, —É–≤–ª–µ—á–µ–Ω–∏–µ)?'), parse_mode=ParseMode.MARKDOWN_V2)


async def process_occupation(message: types.Message, state: FSMContext):
    await state.update_data(occupation=message.text)
    await Profile.next()
    await message.answer(italic('–û–ø–∏—à–∏—Ç–µ —Å–µ–±—è –æ–¥–Ω–∏–º –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ–º.'), parse_mode=ParseMode.MARKDOWN_V2)


async def process_about(message: types.Message, state: FSMContext):
    await state.update_data(about=message.text)
    await Profile.next()
    await message.answer(italic('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–≤–æ–π –∫–æ–Ω—Ç–∞–∫—Ç.'), parse_mode=ParseMode.MARKDOWN_V2, reply_markup=request_contact_kb())


async def process_invalid_contact(message: types.Message):
    await message.answer(bold('–≠—Ç–æ –Ω–µ –≤–∞—à –∫–æ–Ω—Ç–∞–∫—Ç, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å'), parse_mode=ParseMode.MARKDOWN_V2)


async def process_contact(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['contact'] = message.contact.phone_number
        await Profile.next()
        await message.answer(italic('–ü—Ä–∏—à–ª–∏—Ç–µ —Å–≤–æ—ë —Ñ–æ—Ç–æ.'), parse_mode=ParseMode.MARKDOWN_V2, reply_markup=types.ReplyKeyboardRemove())


async def process_invalid_photo(message: types.Message):
    await message.answer(bold('–û—Ç–ø—Ä–∞–≤—å—Ç–µ –º–Ω–µ –≤–∞–ª–∏–¥–Ω–æ–µ —Ñ–æ—Ç–æ.'), parse_mode=ParseMode.MARKDOWN_V2)


async def process_photo_and_save_data(message: types.Message, state: FSMContext):
    async with state.proxy() as data:
        data['photo'] = message.photo[-1].file_id
        city_id = db.get_city_id(data['city'])
        db.update_user_data(message.from_user.id, data['name'], data['age'], data['gender'], city_id,
                            data['occupation'], data['about'], data['photo'], data['contact'])

        if 'inviter' in data.keys():
            increase_by = 10
            log.info(f"{data['inviter']} invited referral")
            if not int(data['gender']):
                increase_by += 40
                log.info("It's a girl :)")
            increased_hearts = db.get_user_hearts(data['inviter']) + increase_by
            db.update_user_hearts(data['inviter'], increased_hearts)
    await state.finish()
    await message.answer(bold('–û—Ç–ª–∏—á–Ω–æ!üëå –ú–æ–∂–µ—Ç–µ –ø—Ä–∏—Å—Ç—É–ø–∞—Ç—å –∫ –ø–æ–∏—Å–∫—É —Å–≤–æ–µ–π –≤—Ç–æ—Ä–æ–π –ø–æ–ª–æ–≤–∏–Ω–∫–∏!üòç –£–¥–∞—á–∏ –≤ –ª—é–±–æ–≤–Ω—ã—Ö –¥–µ–ª–∞—Ö!‚úå'),
                         parse_mode=ParseMode.MARKDOWN_V2, reply_markup=home_keyboard())
